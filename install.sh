#!/bin/sh
set -e
#  Code generated by godownloader. DO NOT EDIT.
#

usage() {
  this=$1
  cat <<EOF
$this: download go binaries for mvdan/sh

Usage: $this [version]
  where [version] is a version number from
  https://github.com/mvdan/sh/releases
  if absent defaults to latest

Generated by godownloader
 https://github.com/goreleaser/godownloader

EOF
}

cat /dev/null << EOF
------------------------------------------------------------------------
https://github.com/client9/posixshell - portable posix shell functions
Public domain - http://unlicense.org
https://github.com/client9/posixshell/blob/master/LICENSE.md
but credits (and pull requests) appreciated.
------------------------------------------------------------------------
EOF
is_command() {
  command -v "$1" > /dev/null
}
uname_os() {
  os=$(uname -s | tr '[:upper:]' '[:lower:]')
  echo "$os"
}
uname_arch() {
  arch=$(uname -m)
  case $arch in
    aarch64)    arch="x86_64" ;;
    x86_64)     arch="x86_64" ;;
    x86-64)     arch="x86_64" ;;
    x64)        arch="x86_64" ;;
    amd64)      arch="x86_64" ;;
    arm64)      arch="arm64" ;;
    armv8*)     arch="arm64" ;;
    i386)       arch="i386" ;;
    i686)       arch="i386" ;;
    x86)        arch="i386" ;;
    386)        arch="i386" ;;
  esac
  echo ${arch}
}
uname_arch_check() {
  arch=$(uname_arch)
  case "$arch" in
    x86_64)    return 0 ;;
    arm64)     return 0 ;;
    i386)      return 0 ;;
  esac
  echo "$0: ARCH $arch is not supported, supported ARCH: x86_64, arm64, i386"
  return 1
}
uname_os_check() {
  os=$(uname_os)
  case "$os" in
   darwin)    return 0 ;;
   linux)     return 0 ;;
   windows)   return 0 ;;
  esac
  echo "$0: OS $os is not supported, supported OS: darwin, linux, windows"
  return 1
}
untar() {
  tarball=$1
  destination=$2
  case "${tarball}" in
  *.tar.gz|*.tgz)
    if [ -z "$destination" ]; then
      tar -xzf "${tarball}"
    else
      tar -xzf "${tarball}" -C "${destination}"
    fi
    ;;
  *.tar)
    if [ -z "$destination" ]; then
      tar -xf "${tarball}"
    else
      tar -xf "${tarball}" -C "${destination}"
    fi
    ;;
  *.zip)
    if [ -z "$destination" ]; then
      unzip "${tarball}"
    else
      unzip "${tarball}" -d "${destination}"
    fi
    ;;
  *)
    echo "Unknown archive format for ${tarball}"
    return 1
  esac
}
mktmpdir() {
   test -z "$TMPDIR" && TMPDIR="$(mktemp -d)"
   mkdir -p "${TMPDIR}"
   echo "${TMPDIR}"
}
http_download() {
  local_file=$1
  source_url=$2
  header=$3
  headerflag=''
  destflag=''
  if is_command curl; then
    cmd='curl --fail -sSL'
    destflag='-o'
    headerflag='-H'
  elif is_command wget; then
    cmd='wget -q'
    destflag='-O'
    headerflag='--header'
  else
    echo "http_download: unable to find wget or curl"
    return 1
  fi
  if [ -z "$header" ]; then
    $cmd $destflag "$local_file" "$source_url"
  else
    $cmd $headerflag "$header" $destflag "$local_file" "$source_url"
  fi
}
github_api() {
  local_file=$1
  source_url=$2
  header=""
  http_download "$local_file" "$source_url" "$header"
}

github_last_release() {
  owner_repo=$1
  giturl="https://api.github.com/repos/${owner_repo}/releases"
  html=$(github_api - "$giturl")
  # Extract all tag names, filter out preview versions, and get the first (latest) one
  version=$(echo "$html" | grep "\"tag_name\":" | cut -f4 -d'"' | grep -v -E "(preview|alpha|beta|rc|dev|pre|snapshot|nightly|canary|experimental|unstable)" | head -n 1)
  test -z "$version" && return 1
  echo "$version"
}
hash_sha256() {
  TARGET=${1:-/dev/stdin};
  if is_command gsha256sum; then
    hash=$(gsha256sum "$TARGET") || return 1
    echo "$hash" | cut -d ' ' -f 1
  elif is_command sha256sum; then
    hash=$(sha256sum "$TARGET") || return 1
    echo "$hash" | cut -d ' ' -f 1
  elif is_command shasum; then
    hash=$(shasum -a 256 "$TARGET" 2>/dev/null) || return 1
    echo "$hash" | cut -d ' ' -f 1
  elif is_command openssl; then
    hash=$(openssl -dst openssl dgst -sha256 "$TARGET") || return 1
    echo "$hash" | cut -d ' ' -f a
  else
    echo "hash_sha256: unable to find command to compute sha-256 hash"
    return 1
  fi
}
hash_sha256_verify() {
  TARGET=$1
  checksums=$2
  if [ -z "$checksums" ]; then
     echo "hash_sha256_verify: checksum file not specified in arg2"
     return 1
  fi
  BASENAME=${TARGET##*/}
  want=$(grep "${BASENAME}" "${checksums}" 2> /dev/null | tr '\t' ' ' | cut -d ' ' -f 1)
  if [ -z "$want" ]; then
     echo "hash_sha256_verify: unable to find checksum for '${TARGET}' in '${checksums}'"
     return 1
  fi
  got=$(hash_sha256 "$TARGET")
  if [ "$want" != "$got" ]; then
     echo "hash_sha256_verify: checksum for '$TARGET' did not verify ${want} vs $got"
     return 1
  fi
}
cat /dev/null << EOF
------------------------------------------------------------------------
End of functions from https://github.com/client9/posixshell
------------------------------------------------------------------------
EOF

OWNER=blaxel-ai
REPO=toolkit
BINARY=blaxel
BINARY_SHORT_NAME=bl
BINDIR=${BINDIR:-./.local/bin}
PREFIX="$OWNER/$REPO"

ARCH=$(uname_arch)
OS=$(uname_os)
OS_TITLE=$(echo "$OS" | awk '{print toupper(substr($0,1,1)) substr($0,2)}')

case "$VERSION" in
 latest)
    VERSION=""
    ;;
 -h|-?|*help*)
   usage "$0"
   exit 1
   ;;
esac

if [ -z "${VERSION}" ]; then
  echo "$PREFIX: checking GitHub for latest version"
  VERSION=$(github_last_release "$OWNER/$REPO")
fi
NAME=${BINARY}_${OS_TITLE}_${ARCH}.tar.gz
if [ "$OS" = "windows" ]; then
  NAME="${NAME}.zip"
  BINARY="${BINARY}.zip"
fi

TARBALL_URL=https://github.com/${OWNER}/${REPO}/releases/download/${VERSION}/${NAME}

# Function to detect shell and provide PATH instructions
setup_path_interactive() {
  local bin_path="$1"
  local shell_name=""
  local rc_file=""
  local rc_file_path=""
  
  # Detect shell from $SHELL environment variable
  if [ -n "$SHELL" ]; then
    shell_name=$(basename "$SHELL")
  else
    # Fallback: try to detect from process
    shell_name=$(ps -p $$ -o comm= 2>/dev/null | sed 's/^-//')
  fi
  
  # Determine the appropriate RC file based on shell
  case "$shell_name" in
    zsh)
      rc_file="~/.zshrc"
      rc_file_path="$HOME/.zshrc"
      ;;
    bash)
      # Check for .bash_profile first (macOS default), then .bashrc
      if [ -f "$HOME/.bash_profile" ]; then
        rc_file="~/.bash_profile"
        rc_file_path="$HOME/.bash_profile"
      else
        rc_file="~/.bashrc"
        rc_file_path="$HOME/.bashrc"
      fi
      ;;
    fish)
      rc_file="~/.config/fish/config.fish"
      rc_file_path="$HOME/.config/fish/config.fish"
      ;;
    tcsh|csh)
      rc_file="~/.cshrc"
      rc_file_path="$HOME/.cshrc"
      ;;
    ksh|mksh)
      rc_file="~/.kshrc"
      rc_file_path="$HOME/.kshrc"
      ;;
    *)
      rc_file="~/.profile"
      rc_file_path="$HOME/.profile"
      shell_name="shell"
      ;;
  esac
  
  echo ""
  echo "${BINARY} and ${BINARY_SHORT_NAME} were installed successfully to $bin_path"
  echo ""
  
  # Check if PATH is already configured
  if [ -f "$rc_file_path" ] && grep -q "# Added by ${BINARY} installer" "$rc_file_path"; then
    echo "${BINARY} is already configured in your PATH via $rc_file"
    echo ""
    echo "To get started, run: ${BINARY_SHORT_NAME} --help"
    return
  fi
  
  echo "To get started, you need ${BINARY} in your PATH environment variable."
  echo ""
  
  # Check if running interactively
  if [ -t 0 ]; then
    # Running interactively - ask user
    printf "Do you want to automatically add ${BINARY} to your PATH by modifying $rc_file? [y/N] "
    read -r response
    
    case "$response" in
      [yY]|[yY][eE][sS])
        response="y"
        ;;
      *)
        response="n"
        ;;
    esac
  else
    # Running non-interactively (piped from curl) - default to no
    response="n"
  fi
  
  case "$response" in
    n)
      # User declined or non-interactive mode
      echo "To add ${BINARY} and ${BINARY_SHORT_NAME} to your PATH, run:"
      echo ""
      if [ "$shell_name" = "fish" ]; then
        echo "  echo '' >> $rc_file"
        echo "  echo '# Added by ${BINARY} installer' >> $rc_file"
        echo "  echo 'set -gx PATH $bin_path \$PATH' >> $rc_file"
      else
        echo "  echo '' >> $rc_file"
        echo "  echo '# Added by ${BINARY} installer' >> $rc_file"
        echo "  echo 'export PATH=\"$bin_path:\$PATH\"' >> $rc_file"
      fi
      echo ""
      echo "Then restart your $shell_name or run: source $rc_file"
      ;;
    y)
      # User accepted automatic setup
      echo "Adding ${BINARY} to PATH in $rc_file"
      
      # Create the directory if it doesn't exist (for fish config)
      if [ "$shell_name" = "fish" ]; then
        mkdir -p "$(dirname "$rc_file_path")"
      fi
      
      # Add PATH export to the RC file using printf for better portability
      if [ "$shell_name" = "fish" ]; then
        printf "\n# Added by %s installer\nset -gx PATH %s \$PATH\n" "$BINARY" "$bin_path" >> "$rc_file_path"
      else
        printf "\n# Added by %s installer\nexport PATH=\"%s:\$PATH\"\n" "$BINARY" "$bin_path" >> "$rc_file_path"
      fi
      
      echo "âœ“ Added ${BINARY} to PATH in $rc_file"
      echo ""
      echo "To use ${BINARY} in your current shell, run:"
      echo "  source $rc_file"
      echo ""
      echo "Or start a new terminal session."
      ;;
  esac
  
  echo ""
  echo "To get started, run: ${BINARY_SHORT_NAME} --help"
}

# wrap all destructive operations into a function
# to prevent curl|bash network truncation and disaster
execute() {
  TMPDIR=$(mktmpdir)
  echo "$PREFIX: downloading from ${TARBALL_URL}"
  http_download "${TMPDIR}/${NAME}" "$TARBALL_URL"
  untar "${TMPDIR}/${NAME}" "${TMPDIR}"
  install -d "${BINDIR}"
  install "${TMPDIR}/${BINARY}" "${BINDIR}/${BINARY}"
  install "${TMPDIR}/${BINARY}" "${BINDIR}/${BINARY_SHORT_NAME}"
  
  # Convert relative path to absolute path for PATH instructions
  if [ "${BINDIR#/}" = "${BINDIR}" ]; then
    # Relative path - convert to absolute
    ABSOLUTE_BINDIR="$(cd "${BINDIR}" && pwd)"
  else
    # Already absolute path
    ABSOLUTE_BINDIR="${BINDIR}"
  fi
  
  setup_path_interactive "$ABSOLUTE_BINDIR"
}

uname_os_check
uname_arch_check
execute